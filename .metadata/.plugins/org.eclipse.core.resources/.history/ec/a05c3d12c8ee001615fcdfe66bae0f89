package be.vdab.servlets.docenten;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import be.vdab.entities.Docent;
import be.vdab.enums.Geslacht;
import be.vdab.services.CampusService;
import be.vdab.services.DocentService;

@WebServlet("/docenten/toevoegen.htm")
public class ToevoegenServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final String VIEW = "/WEB-INF/JSP/docenten/toevoegen.jsp";
	private static final String REDIRECT_URL = "%s/docenten/zoeken.htm?id=%d";
	private final transient DocentService docentService = new DocentService();
	private final transient CampusService campusService = new CampusService();
	
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setAttribute("campussen", campusService.finalAll());
		request.getRequestDispatcher(VIEW).forward(request, response);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Map<String,String> fouten = new HashMap<>();
		String voornaam = request.getParameter("voornaam");
		String familienaam = request.getParameter("familienaam");
		BigDecimal wedde = null;
		String geslacht = request.getParameter("geslacht");
		long rijksRegisterNr = 0;
		
		if(!Docent.isVoornaamValid(voornaam)){
			fouten.put("voornaam", "verplicht");
		}
		
		if(!Docent.isFamilienaamValid(familienaam)){
			fouten.put("familienaam", "verplicht");
		}
		
		try{
			wedde = new BigDecimal(request.getParameter("wedde"));
			if(!Docent.isWeddeValid(wedde)){
				fouten.put("wedde", "tik een positief getal of 0");
			}
		}catch (NumberFormatException ex){
			fouten.put("wedde", "tik een positief getal of 0");
		}
		
		if(geslacht == null){
			fouten.put("geslacht", "verplicht");
		}
		
		try{
			rijksRegisterNr = Long.parseLong(request.getParameter("rijksregisternr"));
			if(!Docent.isRijksRegisterNrValid(rijksRegisterNr)){
				fouten.put("rijksregisternummer", "verkeerde cijfers");
			}
		}catch(NumberFormatException ex){
			fouten.put("rijksregisternummer", "verkeerde cijfers");
		}
		
		String campusId = request.getParameter("campussen");
		if(campusId == null){
			fouten.put("campussen", "verplicht");
		}
		
		if(fouten.isEmpty()){
			Docent docent = new Docent(voornaam,familienaam,wedde,Geslacht.valueOf(geslacht),rijksRegisterNr);
			docentService.create(docent);
			response.sendRedirect(response.encodeRedirectURL(String.format(REDIRECT_URL, request.getContextPath(), docent.getId())));
		}else{
			request.setAttribute("fouten", fouten);
			request.getRequestDispatcher(VIEW).forward(request, response);
		}
	}

}
